@using NavneetBlogSite.Views.Components
@using Microsoft.AspNetCore.Identity
@model IEnumerable<NavneetBlogSite.Models.BlogPost>
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Index</h1>
@if (SignInManager.IsSignedIn(User))
{
    <h2>@(await Html.RenderComponentAsync<BlogEdit>(RenderMode.ServerPrerendered, new { baseUrl = "/BlogPosts" }))</h2>
}
<p>
    <a asp-action="Create">Create New</a>
</p>
@if (SignInManager.IsSignedIn(User))
{
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Content)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AuthorEmail)
            </th>
            <th></th>
        </tr>
    </thead>
  

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Content)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AuthorEmail)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
}
else
{




<h1 class="text-danger">Sign In To Post The Blog</h1>

}

@if (SignInManager.IsSignedIn(User))
{
    @(await Html.RenderComponentAsync<BlogList>(RenderMode.ServerPrerendered, new BlogList { ModelList = Model.ToList() }))
}